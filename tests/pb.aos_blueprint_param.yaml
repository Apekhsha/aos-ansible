
---
- name: Test aos_blueprint module
  hosts: aos-server
  connection: local
  gather_facts: no
  vars:
    session_wrong_token:
      server: "{{address}}"
      port: "{{port}}"
      token: "WRONGTOKEN"
  pre_tasks:
    - include_vars: "resources/blueprint_params.yml"
      tags: [ always ]

  tasks:
#-------------------------------------------------------
# TESTS 000 - Open Session
#-------------------------------------------------------
    - name: Open Session on AOS Server
      uri:
        url: "http://{{address}}:{{port}}/api/user/login"
        method: POST
        status_code: 201
        HEADER_Content-Type: 'application/json'
        HEADER_Accept: 'application/json'
        body: >
          {
            "username": "{{username}}",
            "password": "{{password}}"
          }
        body_format: json
      register: session
      tags: [ always ]

    - name: Format token into session_ok variable
      set_fact:
        session_ok:
          server: "{{address}}"
          port: "{{port}}"
          token: "{{session.json.token}}"
      tags: [ always ]

#-------------------------------------------------------
# TESTS 100 - Wrong Inputs
#-------------------------------------------------------
    - name: "TEST 101 - Session is mandatory"
      aos_blueprint_param:
        blueprint: "my-blueprint"
        state: present
      register: test
      ignore_errors: True
      tags: [ negative, param ]

    - name: Check TEST 101
      assert:
        that:
          - test|failed
          - "test.msg.find('missing required arguments') != -1"
      tags: [ negative, param ]

#-------------------------------------------------------
    - name: "TEST 103 - Session is a dict"
      aos_blueprint_param:
        session: "my-session"
        blueprint: "my-blueprint"
        name: "name"
        value:
          value: true
        state: present
      register: test
      ignore_errors: True
      tags: [ negative, param ]

    - name: Check TEST 103
      assert:
        that:
          - test|failed
          - "test.msg.find('argument session is of type') != -1"
      tags: [ negative, param ]
#-------------------------------------------------------
    - name: "TEST 104 - Session is not valid"
      aos_blueprint_param:
        session: "{{ session_wrong_token }}"
        blueprint: "my-blueprint"
        name: "name"
        value:
          value: true
        state: present
      register: test
      ignore_errors: True
      tags: [ negative, param ]

    # - debug: var=test
    - name: Check TEST 104
      assert:
        that:
          - test|failed
          - "test.msg.find('Unable to login to the AOS server') != -1"
      tags: [ negative, param ]
#-------------------------------------------------------
# TESTS 200 - Valid Inputs
#-------------------------------------------------------
    - name: TEST 200 - Get list of available parameters
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        get_param_list: true
      register: test
      ignore_errors: True
      tags: [ list ]

    # - debug: var=test
    #   tags: [ list ]

    - name: Check TEST 200
      assert:
        that:
          - test|success
          - not test|changed
          - test.params_list
      tags: [ list ]

#-------------------------------------------------------
    - name: INIT 201 - Delete Existing Blueprint parameter
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
        state: absent
      with_dict: "{{blueprint_params_dhcp}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    - name: Check INIT 201
      assert:
        that:
          - test|success
      tags: [ input ]

#-------------------------------------------------------
    - name: TEST 201 - Add Blueprint parameter (dhcp), check mode 1/2
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_dhcp}}"
      register: test
      check_mode: yes
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 201
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 202 - Add Blueprint parameter (dhcp), check mode 2/2
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_dhcp}}"
      register: test
      check_mode: yes
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 202
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 203 - Add Blueprint parameter (dhcp)
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_dhcp}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]
    - name: Check TEST 203
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 204 - Add Blueprint parameter (dhcp)
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_dhcp}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 204
      assert:
        that:
          - test|success
          - not test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: INIT 211 - Delete Existing Blueprint parameter
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
        state: absent
      with_dict: "{{blueprint_params_device_map}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    - name: Check INIT 211
      assert:
        that:
          - test|success
      tags: [ input ]

#-------------------------------------------------------
    - name: TEST 211 - Add Blueprint parameter (device_map), check mode 1/2
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_device_map}}"
      register: test
      check_mode: yes
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 211
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 212 - Add Blueprint parameter (device_map), check mode 2/2
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_device_map}}"
      register: test
      check_mode: yes
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 212
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 213 - Add Blueprint parameter (device_map)
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_device_map}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]
    - name: Check TEST 213
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 214 - Add Blueprint parameter (device_map)
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_device_map}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 214
      assert:
        that:
          - test|success
          - not test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 215 - Add Blueprint parameter (device_map), no param_map
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        # param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_device_map}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 215
      assert:
        that:
          - test|success
          - not test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 216 - Add Blueprint parameter (device_map), direct
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "logical_device_maps"
        value:
          spine_1: CumulusVX-Spine-Switch
          spine_2: CumulusVX-Spine-Switch
          leaf_1: CumulusVX-Leaf-Switch
          leaf_2: CumulusVX-Leaf-Switch
          leaf_3: CumulusVX-Leaf-Switch
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 216
      assert:
        that:
          - test|success
          - not test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 217 - Get Blueprint parameter (device_map)
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "logical_device_maps"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    - debug: var=test
      tags: [ input ]

    - name: Check TEST 217
      assert:
        that:
          - test|success
          - not test|changed
          - test.blueprint
          - test.value

      tags: [ input ]
#-------------------------------------------------------
    - name: INIT 221 - Delete Existing Blueprint parameter
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
        state: absent
      with_dict: "{{blueprint_params_resource}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    - name: Check INIT 221
      assert:
        that:
          - test|success
      tags: [ input ]

#-------------------------------------------------------
    - name: TEST 221 - Add Blueprint parameter (resource_pools), check mode 1/2
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_resource}}"
      register: test
      check_mode: yes
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 221
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 222 - Add Blueprint parameter (resource_pools), check mode 2/2
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_resource}}"
      register: test
      check_mode: yes
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 222
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 223 - Add Blueprint parameter (resource_pools)
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_resource}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]
    - name: Check TEST 223
      assert:
        that:
          - test|success
          - test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 224 - Add Blueprint parameter (resource_pools)
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        param_map: "{{ blueprint_params_maps.get(item.key) | to_json }}"
      with_dict: "{{blueprint_params_resource}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 224
      assert:
        that:
          - test|success
          - not test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 225 - Add Blueprint parameter (resource_pools), no param_map
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
      with_dict: "{{blueprint_params_resource}}"
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    # - debug: var=test
    #   tags: [ input ]

    - name: Check TEST 225
      assert:
        that:
          - test|success
          - not test|changed
      tags: [ input ]
#-------------------------------------------------------
    - name: TEST 226 - Add Blueprint parameter (resource_pools), by provided a param_map inline
      aos_blueprint_param:
        session: "{{session_ok}}"
        blueprint: "my-blueprint-l2"
        name: "resource_pools"
        value:
          leaf_loopback_ips: ['Switches-IpAddrs']
          spine_loopback_ips: ['Switches-IpAddrs']
          spine_leaf_link_ips: ['Switches-IpAddrs']
          spine_asns: ['Private-ASN-pool']
          leaf_asns: ['Private-ASN-pool']
          virtual_network_svi_subnets: ['Servers-IpAddrs']
        param_map:
          leaf_loopback_ips: IpPools
          spine_loopback_ips: IpPools
          spine_leaf_link_ips: IpPools
          spine_asns: AsnPools
          leaf_asns: AsnPools
          virtual_network_svi_subnets: IpPools
        state: present
      register: test
      check_mode: no
      ignore_errors: True
      tags: [ input ]

    - name: Check TEST 226
      assert:
        that:
          - test|success
          - not test|changed
      tags: [ input ]
