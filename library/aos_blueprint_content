#!/usr/bin/env python

DOCUMENTATION = '''
---
module: aos_login
author: Jeremy Schulman
version_added: "1.0.0"
short_description: Login to AOS server for session token
description:
    - Obtain the AOS server session token by providing the required
      username and password credentials.  Upon successful authentication,
      this module will return the session-token that is required by all
      subsequent AOS module usage.
requirements:
    - aos-pyez
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: true
    port:
        description:
            - port number to use when connecting to the device
        required: false
    user:
        description:
            - Login username
        required: false
        default: admin
    passwd:
        description:
            - Login password
        required: false
        default: admin
'''

EXAMPLES = '''
- aos_login: host={{ inventory_hostname }} user=admin passwd=admin
  register: aos

'''

import sys
sys.path.append('/Users/jeremy/Projects/aos-pyez/pylib')

import requests
from apstra.aoscp.session import Session
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            session=dict(required=True, type="dict"),
            name=dict(required=True)))

    mod_args = module.params
    name = mod_args['name']
    auth = mod_args['session']

    aos = Session()
    aos.api_http = auth['url']
    aos.api_headers = auth['headers']

    got = requests.get('%s/blueprints' % aos.api_http, headers=aos.api_headers)
    if not got.ok:
        module.fail_json(msg='unable to get blueprint catalog: code={}'.format(got.status_code))

    body = got.json()
    found = filter(lambda x: name == x['display_name'], body)
    if not len(found):
        module.fail_json(msg='blueprint named %s not found' % name)

    digest=found[0]
    got = requests.get('{}/blueprints/{}'.format(aos.api_http, digest['id']),
                       headers=aos.api_headers)
    if not got.ok:
        module.fail_json(msg='unable to get blueprint: code={}'.format(got.status_code))

    module.exit_json(changed=True, content=got.json())


main()
